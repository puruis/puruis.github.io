<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FS&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://puruis.github.io/"/>
  <updated>2019-03-19T03:25:51.831Z</updated>
  <id>https://puruis.github.io/</id>
  
  <author>
    <name>purui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 简单入门-Docker-machine</title>
    <link href="https://puruis.github.io/2019-03-19-docker%20%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/"/>
    <id>https://puruis.github.io/2019-03-19-docker 简单入门（2）/</id>
    <published>2019-03-18T16:00:00.000Z</published>
    <updated>2019-03-19T03:25:51.831Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们可以先从 docker的文档来了解下什么是 Docker-machine，<br>大概意思如下</p><p>您可以使用Docker Machine：</p><pre><code>1.在Mac或Windows上安装并运行Docker2.配置和管理多个远程Docker主机3.提供Swarm集群</code></pre><blockquote><p>Docker Machine是一个工具，可让您在虚拟主机上安装Docker Engine，并使用docker-machine命令管理主机。您可以使用Machine在本地Mac或Windows机器上，公司网络上，数据中心或Azure，AWS或Digital Ocean等云提供商上创建Docker主机。</p></blockquote><p><img src="/2019-03-19-docker 简单入门（2）/屏幕快照 2019-03-18 下午6.33.46.png" alt="ad2d70f43e9135378d13b9af5ad9beb8"></p><p>我们安装了 Docker 后 它默认 也安装了 Docker-machine</p><p><img src="/2019-03-19-docker 简单入门（2）/屏幕快照 2019-03-18 下午6.42.58.png" alt="a940583012c16853a2f82e16fb875b84"></p><p>来试下 用Docker-machine 在虚拟机上安装Docker</p><p>在Docker 启动的情况下 执行 docker-machine create –driver virtualbox default<br>它会自动开始下载 一个轻量级Linux发行版本（boot2docker）<br>成功之后 我们会在 VirtualBox 中发现有一个新的虚拟机正在运行中<br><img src="/2019-03-19-docker 简单入门（2）/屏幕快照 2019-03-18 下午8.40.06.png" alt="612cab248d48e3726d067d44799e8f2b"></p><p>然后执行 docker-machine ls<br>可以看到正在运行的实例，那么进入到 容器内部呢？<br>和vagrant差不多 docker-machine ssh default（容器名）<br><img src="/2019-03-19-docker 简单入门（2）/屏幕快照 2019-03-19 上午10.48.14.png" alt="1267c4daaf1c01ec60fcb916b1b89033"></p><p>运行。docker version 就会发现 这里已经装好了 docker<br><img src="/2019-03-19-docker 简单入门（2）/屏幕快照 2019-03-19 上午10.49.55.png" alt="cbe9ad15aed232ae447c60992072fae9"></p><p>其实 docker-machine 也可以用来创建云主机，有兴趣的朋友的自己尝试一下，可以参考下面的文档<br><img src="/2019-03-19-docker 简单入门（2）/屏幕快照 2019-03-19 上午10.51.44.png" alt="ee095e7a4802aea49262f9986a177942"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先我们可以先从 docker的文档来了解下什么是 Docker-machine，&lt;br&gt;大概意思如下&lt;/p&gt;
&lt;p&gt;您可以使用Docker Machine：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.在Mac或Windows上安装并运行Docker
2.配置和管理多个远程Dock
      
    
    </summary>
    
      <category term="Docker" scheme="https://puruis.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://puruis.github.io/tags/Docker/"/>
    
      <category term="入门" scheme="https://puruis.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Docker-machine" scheme="https://puruis.github.io/tags/Docker-machine/"/>
    
  </entry>
  
  <entry>
    <title>Docker 简单入门-安装Docker</title>
    <link href="https://puruis.github.io/2019-03-16-docker%20%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/"/>
    <id>https://puruis.github.io/2019-03-16-docker 简单入门（1）/</id>
    <published>2019-03-15T16:00:00.000Z</published>
    <updated>2019-03-18T10:17:16.798Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019-03-16-docker 简单入门（1）/7D2913DC-BF91-41C5-8DBE-5DA4CDA001D8.png" alt="logo"></p><p> 最近在整理docker的相关知识体系，顺便做些笔记和大家分享下，如果对docker有过一些了解的人，都知道docker是一门容器技术，并且在国内有不在少数的公司在使用，其实就包括了BAT,所以想了解前沿技术的朋友们也可以看看，这篇文章开始将带大家一起来学习了解 Docker</p><p>首先我们先来了解下什么 是 docker </p><blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口</p></blockquote><p>传统的VM 如左图 最底层 需要一台服务器，之上安装了OS，然后之上 使用 Hypervisor 虚拟技术 在虚拟层之上 虚拟出系统在安装部署我们的应用，每个Guest Os 虚拟分配物理主机的空间，它们共享着主机的硬件资源，需要非常大空间和资源，所以我们可以把它看作是一个 硬件级别的虚拟化。</p><p>右图是docker 的架构<br>Docker 的容器利用LXC（Linux Container容器是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源。）<br>它是一个系统级别的虚拟化，而不是创建一个完成成熟的虚拟环境，所以它启动只需要几秒。</p><p>这里我们只是简单从一个方面来分析来 他们之间的差别，更多就不在这里详述了。<br><img src="/2019-03-16-docker 简单入门（1）/78A7A17E-858E-4C14-AA9B-D474681167FF.jpg" alt="logo"></p><p>首先我们来看看 Docker的安装<br>我们打开 <a href="https://docs.docker.com" target="_blank" rel="noopener">Docker文档中心</a></p><p><img src="/2019-03-16-docker 简单入门（1）/屏幕快照 2019-03-16 下午4.54.20.png" alt="logo"></p><p>然后我们可以看到左中的位置 有个 Get Docker 我们点开 选择Docker CE Docker的社区版 接下来 就是 选择我们 当前电脑的系统 这里<strong><u>注意 如果你的电脑是 windows 那么Docker 只支持Windows 10的版本</u></strong><br>win7 win8 等可以通过docker toolbox来安装 这里就不叙述了</p><p>然后我们看到右边出现下载链接 直接点击下载即可</p><p>操作步骤 一路next</p><p>我本地是 Mac系统 安装完成后 点击安装好的 软件 图标<br>稍等 ，右上角就会出现我们的 Docker 图标<br><img src="/2019-03-16-docker 简单入门（1）/屏幕快照 2019-03-16 下午4.57.57.png" alt="logo"></p><p>好了，接下来我们来验证下 我们是否已经安装成功了</p><p>在命令行界面 我们来验证下 是否安装成功，如果你能看到这个界面 证明你已经安装成功了。</p><p><img src="/2019-03-16-docker 简单入门（1）/屏幕快照 2019-03-16 下午5.01.22.png" alt="logo"></p><p>windows 的安装 同上 一路next 没有太大差别</p><p>主要我们说下 Linux的Docker安装， 这里我们通过 虚拟机来演示，我这里准备了一个 VirtualBox 然后 我们通过 vagrant 来安装 虚拟机，它可以帮助我们自动化安装一个虚拟机环境，并管理这个环境，我们先下载一个 <a href="https://www.vagrantup.com" target="_blank" rel="noopener">Vagrant</a> 也是一键安装，然后<br>输入 命令vagrant 验证vagrant -version 验证是否安装成功<br>如果你看到 如下界面 那就证明 你已经安装成功了<br><img src="/2019-03-16-docker 简单入门（1）/屏幕快照 2019-03-16 下午5.33.50.png" alt="logo"></p><p>接下来 我们建一个 centos7的 目录<br>然后 cd 切换到 centos7 下，运行 vagrant init centos/7 运行完 我们发现目录下 多了一个Vagrantfile 的文件<br><img src="/2019-03-16-docker 简单入门（1）/屏幕快照 2019-03-16 下午5.44.01.png" alt="logo"></p><p>然后 我们 运行 vagrant up 它就会自动去下载 centos7的 虚拟机镜像并安装 运行 这个过程可以会比较长<br>等安装完成后,我们可以看到 VirtualBox 中的虚拟机已经启动出来了<br><img src="/2019-03-16-docker 简单入门（1）/屏幕快照 2019-03-16 下午5.53.44.png" alt="logo"></p><p>查看 Docker 的 linux系统 的安装文档<br>1.先移除 之前安装的 docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">```                  </span><br><span class="line">                  </span><br><span class="line">2.安装需要的一些包</span><br></pre></td></tr></table></figure></p><p>$ sudo yum install -y yum-utils \<br>  device-mapper-persistent-data \<br>  lvm2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">3.设置 远程库</span><br></pre></td></tr></table></figure></p><p>$ sudo yum-config-manager \<br>    –add-repo \<br>    <a href="https://download.docker.com/linux/centos/docker-ce.repo" target="_blank" rel="noopener">https://download.docker.com/linux/centos/docker-ce.repo</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    </span><br><span class="line">4.安装 docker</span><br></pre></td></tr></table></figure></p><p>$ sudo yum install docker-ce docker-ce-cli containerd.io<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![logo](docker 简单入门（1）/屏幕快照 2019-03-16 下午6.01.53.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装完成后</span><br></pre></td></tr></table></figure></p><p>$ sudo systemctl start docker<br>设置开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后我们拉去一个 容器 hello-world</span><br></pre></td></tr></table></figure></p><p>$ sudo docker run hello-world<br><code>`</code></p><p>看到下面的输出 就成功了 😯，以上我们 分别演示了 Mac系统和linux系统的 Docker安装 （windows同Mac），可能才接触Docker的朋友 到这里还是没有搞懂 Docker 到底是拿来干嘛的？<br>没关系，后续的文章会从浅入深来介绍Docker ，保管你会爱上它 😁<br><img src="/2019-03-16-docker 简单入门（1）/屏幕快照 2019-03-16 下午6.17.10.png" alt="logo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019-03-16-docker 简单入门（1）/7D2913DC-BF91-41C5-8DBE-5DA4CDA001D8.png&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;p&gt; 最近在整理docker的相关知识体系，顺便做些笔记和大家分享下，如果对doc
      
    
    </summary>
    
      <category term="Docker" scheme="https://puruis.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://puruis.github.io/tags/Docker/"/>
    
      <category term="入门" scheme="https://puruis.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用Python分析股票市场风险</title>
    <link href="https://puruis.github.io/2019-03-06-%E4%BD%BF%E7%94%A8Python%E5%88%86%E6%9E%90%E8%82%A1%E7%A5%A8%E5%B8%82%E5%9C%BA%E9%A3%8E%E9%99%A9/"/>
    <id>https://puruis.github.io/2019-03-06-使用Python分析股票市场风险/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-03-20T03:51:45.059Z</updated>
    
    <content type="html"><![CDATA[<pre><code>最近在学习python大数据相关的知识,学以致用,废话不多说，这次我们来实战 用python分析 股票市场风险，助你当上Ceo，迎娶白富美，走上人生巅峰。哈哈哈</code></pre><p><img src="/2019-03-06-使用Python分析股票市场风险/154037_1e96ef5f_1289853.png" alt="logo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;最近在学习python大数据相关的知识,学以致用,废话不多说，这次我们来实战 用python分析 股票市场风险，助你当上Ceo，迎娶白富美，走上人生巅峰。哈哈哈
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/2019-03-06-使用Python分析
      
    
    </summary>
    
      <category term="大数据" scheme="https://puruis.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://puruis.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Python" scheme="https://puruis.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 整合 Spring Data Jpa</title>
    <link href="https://puruis.github.io/2019-02-22-SpringBoot%E6%95%B4%E5%90%88Spring%20Data%20Jpa/"/>
    <id>https://puruis.github.io/2019-02-22-SpringBoot整合Spring Data Jpa/</id>
    <published>2019-02-21T16:00:00.000Z</published>
    <updated>2019-03-18T09:55:07.429Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550829338589&amp;di=49ddbdc264fe9758f298541d1d233870&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201603%2F27%2F20160327141837_AfHx5.jpeg" target="_blank" rel="noopener"><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550829338589&amp;di=49ddbdc264fe9758f298541d1d233870&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201603%2F27%2F20160327141837_AfHx5.jpeg" alt=""></a></p><p>download :  <a href="https://github.com/puruis/SpringBoot-Collection.git" target="_blank" rel="noopener">https://github.com/puruis/SpringBoot-Collection.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1550829338589&amp;amp;di=49ddbdc264fe9758f298541d1d2
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://puruis.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://puruis.github.io/tags/SpringBoot/"/>
    
      <category term="Spring Data Jpa" scheme="https://puruis.github.io/tags/Spring-Data-Jpa/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Aop使用</title>
    <link href="https://puruis.github.io/2019-02-21-SpringBoot%20Aop%20%E4%BD%BF%E7%94%A8/"/>
    <id>https://puruis.github.io/2019-02-21-SpringBoot Aop 使用/</id>
    <published>2019-02-20T16:00:00.000Z</published>
    <updated>2019-03-18T09:55:33.400Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://images.gitee.com/uploads/images/2019/0221/153626_e90d6833_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0221/153626_e90d6833_1289853.png" alt=""></a></p><p>查看实验结果</p><p><a href="https://images.gitee.com/uploads/images/2019/0221/153950_e23058a5_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0221/153950_e23058a5_1289853.png" alt=""></a></p><p>download : <a href="https://github.com/puruis/SpringBoot-Collection.git" target="_blank" rel="noopener">https://github.com/puruis/SpringBoot-Collection.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://images.gitee.com/uploads/images/2019/0221/153626_e90d6833_1289853.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://puruis.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://puruis.github.io/tags/SpringBoot/"/>
    
      <category term="Aop" scheme="https://puruis.github.io/tags/Aop/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 整合 thymeleaf</title>
    <link href="https://puruis.github.io/2019-02-20-SpringBoot%20%E6%95%B4%E5%90%88%20thymeleaf/"/>
    <id>https://puruis.github.io/2019-02-20-SpringBoot 整合 thymeleaf/</id>
    <published>2019-02-19T16:00:00.000Z</published>
    <updated>2019-03-20T03:49:19.771Z</updated>
    
    <content type="html"><![CDATA[<p>[<img src="https://dpic.tiankong.com/kl/i7/QJ6674590289.jpg?x-oss-process=style/670ws" alt=""></p><p>（一）Thymeleaf 是个什么？</p><pre><code> 简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：1.Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。2.Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</code></pre><hr><p>download : <a href="https://github.com/puruis/SpringBoot-Collection.git" target="_blank" rel="noopener">https://github.com/puruis/SpringBoot-Collection.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[&lt;img src=&quot;https://dpic.tiankong.com/kl/i7/QJ6674590289.jpg?x-oss-process=style/670ws&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（一）Thymeleaf 是个什么？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://puruis.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://puruis.github.io/tags/SpringBoot/"/>
    
      <category term="thymeleaf" scheme="https://puruis.github.io/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>三分钟搭建SpringBoot工程</title>
    <link href="https://puruis.github.io/themes-life/"/>
    <id>https://puruis.github.io/themes-life/</id>
    <published>2019-02-19T07:14:34.000Z</published>
    <updated>2019-03-20T03:49:02.508Z</updated>
    
    <content type="html"><![CDATA[<p>[<img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550658616372&amp;di=70b7eeb06ed1c994e99b97ef5b7a2b82&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F010018554b6ef4000001bf72617201.jpg" alt=""></p><p>#####什么是SpringBoot?<br>    Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p><ol><li>创建独立的Spring应用程序</li><li>嵌入的Tomcat，无需部署WAR文件</li><li>简化Maven配置</li><li>自动配置Spring</li><li>提供生产就绪型功能，如指标，健康检查和外部配置</li><li>绝对没有代码生成并且对XML也没有配置要求</li></ol><blockquote><p>SpringBoot 有句名言叫做 “约定大于配置” 是什么意思呢？ 我们直接搭建一个SpringBoot的工程来体会下，用起来是什么感觉呢?   <a href="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=4207918509,3343669022&amp;fm=27&amp;gp=0.jpg" target="_blank" rel="noopener"><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=4207918509,3343669022&amp;fm=27&amp;gp=0.jpg" alt=""></a></p></blockquote><p>说下开发环境 :</p><ul><li>jdk1.8</li><li>开发工具 IDEA</li><li>maven</li></ul><p>download : <a href="https://github.com/puruis/SpringBoot-Collection.git" target="_blank" rel="noopener">https://github.com/puruis/SpringBoot-Collection.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1550658616372&amp;amp;di=70b7eeb06ed1c994e99b97ef5
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://puruis.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://puruis.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>实战Docker搭建自动化部署环境，远程自动部署SpringBoot</title>
    <link href="https://puruis.github.io/2019-02-13-%E5%AE%9E%E6%88%98Docker%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%BF%9C%E7%A8%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2SpringBoot/"/>
    <id>https://puruis.github.io/2019-02-13-实战Docker搭建自动化部署环境，远程自动部署SpringBoot/</id>
    <published>2019-02-12T16:00:00.000Z</published>
    <updated>2019-03-18T09:55:55.787Z</updated>
    
    <content type="html"><![CDATA[<p>####起因</p><blockquote><p>项目上线运行后,几乎每天都需要更新代码，虽说很简单 ，本地编译，上传，运行，但是每天重复也是一个十分蛋痛的工作，作为一个工程师 一定要杜绝重复劳动。</p></blockquote><p>####<a href="http://www.docker.org.cn" title="Docker" target="_blank" rel="noopener">Docker</a></p><blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p></blockquote><p>####<a href="https://gitee.com" title="Gitee" target="_blank" rel="noopener">Gitee</a></p><blockquote><p>云端软件开发协作平台</p></blockquote><p>此时 我的测试服务器 已经安装好了 docker 如果你还没有安装 请先安装<br>输入 docker -v  可以查看版本<br><a href="https://images.gitee.com/uploads/images/2019/0125/110740_e2709d98_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0125/110740_e2709d98_1289853.png" alt=""></a></p><p>####推荐此版本的容器</p><p><a href="https://images.gitee.com/uploads/images/2019/0125/144903_7c99ee1c_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0125/144903_7c99ee1c_1289853.png" alt=""></a></p><ol><li><p>第一步</p><blockquote><p><code>docker pull jenkins/jenkins 下载jenkins</code></p></blockquote></li><li><p>第二步</p><blockquote><p><code>docker images 查看本地镜像</code><br><a href="https://img-blog.csdn.net/20180708141046832?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener"><img src="https://img-blog.csdn.net/20180708141046832?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></a><br><a href="https://img-blog.csdn.net/2018070814120663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener"><img src="https://img-blog.csdn.net/2018070814120663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></a></p></blockquote></li><li>第三步<br>新建一个jenkins 目录</li></ol><blockquote><p><code>cd /home</code></p></blockquote><blockquote><p><code>mkdir jenkins</code></p></blockquote><blockquote><p>最后运行 <code>docker run -d --name myjenkins -p 49001:8080 -v /home/jenkins_home:/home/jenkins -v /var/maven/apache-maven-3.6.0:/usr/maven/apache-maven-3.6.0 -v /var/java/jdk1.8.0_191:/usr/java/java1.8.0_191 jenkins(这个是镜像名称)</code>， -v 指定目录映射（把宿主机的 java 和 maven环境映射过去,后续需要进入容器 配置jenkins的 java 和maven 环境）</p></blockquote><blockquote><p>ps:其中49001：8080，表示docker内部使用8080端口，服务器使用49001端口，然后将二者映射起来，之后在浏览器访问的时候实际上还是访问服务器的49001端口,注意关闭防火墙 或是 开通端口号</p></blockquote><blockquote><p>此处需要输入 jenkins自动生成的密码</p></blockquote><blockquote><p>输入 <code>docker exec -it myjenkins bash</code> 进入 myjenkins 容器里面</p></blockquote><blockquote><p>输入 find -name initialAdminPassword<br><a href="https://images.gitee.com/uploads/images/2019/0125/120327_5f98240a_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0125/120327_5f98240a_1289853.png" alt=""></a><br>然后 输入cat 命令打印 initialAdminPassword 的内容 复制到页面中</p></blockquote><p>安装成功<br><a href="https://images.gitee.com/uploads/images/2019/0125/120526_b047c962_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0125/120526_b047c962_1289853.png" alt=""></a><br><a href="https://images.gitee.com/uploads/images/2019/0125/145037_37387e8d_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0125/145037_37387e8d_1289853.png" alt=""></a><br><a href="https://images.gitee.com/uploads/images/2019/0125/120609_40a5db22_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0125/120609_40a5db22_1289853.png" alt=""></a></p><p><a href="https://images.gitee.com/uploads/images/2019/0125/120633_18d43fc3_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0125/120633_18d43fc3_1289853.png" alt=""></a></p><blockquote><p>在全局工具配置中  配置Java环境 和 maven 环境<br><a href="https://images.gitee.com/uploads/images/2019/0125/122401_f7ae7cca_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0125/122401_f7ae7cca_1289853.png" alt=""></a></p></blockquote><hr><blockquote><p>ps: 安装Jenkins后首次访问时由于其他原因【具体未知】会产生离线问题。网上找了个遍还是不能解决，所以只能跳过常用插件安装这步。进入Jenkins后再安装这些插件（我这遇到了，我选择换了一个版本就没事了）</p></blockquote><p>####添加常用的插件<br><a href="https://img-blog.csdn.net/20180708141046832?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener"><img src="https://img-blog.csdn.net/20180708141046832?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></a><br><a href="https://img-blog.csdn.net/20180708141138548?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener"><img src="https://img-blog.csdn.net/20180708141138548?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></a><br><a href="https://img-blog.csdn.net/2018070814120663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener"><img src="https://img-blog.csdn.net/2018070814120663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></a><br><a href="https://img-blog.csdn.net/20180708141251349?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener"><img src="https://img-blog.csdn.net/20180708141251349?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmcxOTk1MTIyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></a></p><h2 id="接下来开始配置-java-及-Maven环境"><a href="#接下来开始配置-java-及-Maven环境" class="headerlink" title="接下来开始配置 java 及 Maven环境"></a>接下来开始配置 java 及 Maven环境</h2><p>JAVA_HOME填写 docker启动命令中 从宿主机映射过来的路径<br>MAVEN也填写 docker启动命令中 从宿主机映射过来的路径<br><a href="https://images.gitee.com/uploads/images/2019/0125/145322_6f6731e1_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0125/145322_6f6731e1_1289853.png" alt=""></a></p><p>##新建项目</p><p>如果没有maven项目可选，那么请先安装 Maven Integration plugin 插件<br><a href="https://images.gitee.com/uploads/images/2019/0213/165139_96fbeba6_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0213/165139_96fbeba6_1289853.png" alt=""></a></p><p>我这里使用的是 git<br><a href="https://images.gitee.com/uploads/images/2019/0213/165520_f22e9112_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0213/165520_f22e9112_1289853.png" alt=""></a><br><a href="https://images.gitee.com/uploads/images/2019/0213/165653_4e6bcb81_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0213/165653_4e6bcb81_1289853.png" alt=""></a></p><p>此处 V2是重点-》需要现在 系统管理的系统设置 中配置<br>Source files：需要上传到服务器的jar包<br>Remove prefix： 需要移除的后缀<br>Remote directory： 远程目录(此处会和 下面配置的 Remote Directory 做拼接)<br>Exec command：文件上传后 执行的命令</p><p>start.sh:</p><pre><code>#!/bin/bashexport JAVA_HOME=/usr/local/java/jdk1.8.0_191echo ${JAVA_HOME}echo &quot;授权当前用户&quot;chmod 777 /opt/project/ixx-web.jar echo &quot;执行....&quot;cd /opt/project/ nohup ${JAVA_HOME}/bin/java -jar ixx-web.jar &gt; aa.out &amp;echo &quot;启动成功&quot;</code></pre><p>stop.sh:</p><pre><code>#!/bin/bashecho &quot;stop SpringBoot BAppApiServerApplication&quot;pid=`ps -ef | grep ixx-web.jar | grep -v grep | awk &apos;{print $2}&apos;`echo “旧应用进程id：$pid”if [ -n &quot;$pid&quot; ]thenkill -9 $pidfi</code></pre><p><a href="https://images.gitee.com/uploads/images/2019/0213/165751_9f59f39e_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0213/165751_9f59f39e_1289853.png" alt=""></a></p><pre><code>Passphrase ： 服务器登录密码Hostname： 服务器地址Username： 用户名Remote Directory：文件上传的远程目录</code></pre><p><a href="https://images.gitee.com/uploads/images/2019/0213/170118_5e517695_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0213/170118_5e517695_1289853.png" alt=""></a></p><p>然后保存，立即构建<br><a href="https://images.gitee.com/uploads/images/2019/0213/170442_5767b20f_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0213/170442_5767b20f_1289853.png" alt=""></a></p><p>系统会开始构建<br><a href="https://images.gitee.com/uploads/images/2019/0213/170958_8c64d259_1289853.png" target="_blank" rel="noopener"><img src="https://images.gitee.com/uploads/images/2019/0213/170958_8c64d259_1289853.png" alt=""></a></p><p>构建成功，此时 jenkins 已经把 master 分支上的代码 编译-&gt;打包-&gt;上传-&gt;运行成功</p><p>以上是这次给大家分享的 jenkins搭建 及 springBoot 远程自动部署，谢谢大家阅读</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####起因&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目上线运行后,几乎每天都需要更新代码，虽说很简单 ，本地编译，上传，运行，但是每天重复也是一个十分蛋痛的工作，作为一个工程师 一定要杜绝重复劳动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;####&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="系统运维" scheme="https://puruis.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="SpringBoot" scheme="https://puruis.github.io/tags/SpringBoot/"/>
    
      <category term="Docker" scheme="https://puruis.github.io/tags/Docker/"/>
    
      <category term="CI自动化部署" scheme="https://puruis.github.io/tags/CI%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
</feed>
